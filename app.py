import streamlit as st
import pandas as pd
from Uploadfile.upload import *
import openai
from Models.model import SentimentItem, TRUEItem, ADS, SentimentTrue, OutputOptions, Item
from io import BytesIO
import asyncio


# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
msg= upload_file()

# if msg:
#     col1 = [row[0] for row in msg]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ col1 ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô list
#     col2 = [row[1] for row in msg]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ col2 ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô list
#     col3 = [row[2] for row in msg]

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
openai_api_key = st.text_input("Enter your OpenAI API Key:")  # ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

# ‡πÄ‡∏û‡∏¥‡πà‡∏° keywords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
keywords_dict = {
    OutputOptions.True_You: ["‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡πá‡∏î", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡πÅ‡∏ï‡πâ‡∏°", "‡∏à‡∏±‡∏î‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç", "‡∏ó‡∏£‡∏π‡∏û‡∏≠‡∏¢‡∏ó‡πå"],
    OutputOptions.True_Corp: ["‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏£‡∏π", "‡∏ã‡∏µ‡∏≠‡∏µ‡πÇ‡∏≠‡∏ó‡∏£‡∏π", "‡∏ó‡∏£‡∏π‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "‡∏ó‡∏£‡∏π ‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡∏Å‡∏£‡∏∏‡πä‡∏õ", "‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠", "‡∏ó‡∏£‡∏π-‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "‡∏ó‡∏£‡∏π ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö", "‡πÄ‡∏≠‡∏™ ‡πÄ‡∏≠‡∏ü ‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠ ‡∏ó‡∏£‡∏π‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ø", "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏π ‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "True  + Dtac"],
    OutputOptions.True_iService: ["true iservice", "‡∏ó‡∏£‡∏π ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™", "‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞","True Service", "‡πÑ‡∏≠‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™"],
    OutputOptions.True_Visions_NOW: ["TrueVisions Now", "TrueVisions Now Max", "‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏π‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô‡∏™‡πå", "‡∏ó‡∏£‡∏π‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô‡∏™‡πå ‡∏ô‡∏≤‡∏ß"],
    OutputOptions.True_Visions: ["‡∏ó‡∏£‡∏π‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô", " truevision", "‡∏ó‡∏£‡∏π‡∏™‡πå‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô", "TRUE Vision"],
    OutputOptions.True_ID: ["True id", "‡∏ó‡∏£‡∏π‡πÑ‡∏≠‡∏î‡∏µ", "TrueID", "trueid"],
    OutputOptions.True_Online: ["‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô", "true fiber", "‡∏ó‡∏£‡∏π‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô", "Fiber Stand alone", "‡πÇ‡∏õ‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô", "WiFi‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô", "Fiber", "‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πåTrue", "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ó‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏î‡∏á",
                                "‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏£‡∏π", "‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πá‡∏ó‡∏ö‡πâ‡∏≤‡∏ô", "True wifi"],
    OutputOptions.True_5G: ["‡πÄ‡∏ô‡πá‡∏ï‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ó‡∏£‡∏π‡∏°‡∏π‡∏ü", "‡∏ã‡∏¥‡∏°", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì", "‡πÄ‡∏ô‡πá‡∏ï‡∏´‡πà‡∏ß‡∏¢",
                            "‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à", "‡πÄ‡∏ô‡πá‡∏ó‡∏ó‡∏£‡∏π", "eSIM", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡πÄ‡∏ô‡πá‡∏ï‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "trueshop", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤", "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏°‡πà‡∏≠‡∏±‡πâ‡∏ô", "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô", "‡πÇ‡∏õ‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ôTruemove", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏£‡∏π",
                            "‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏£‡∏π‡∏Å‡∏±‡∏ö‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡∏Ç‡∏≤‡∏¢‡πÇ‡∏õ‡∏£", "‡∏ó‡∏£‡∏π‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ó‡∏£‡∏π‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡πá‡∏ï", "‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á", "‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏£‡∏π‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡πâ‡∏°‡πÜ", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÇ‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á‡∏ó‡∏£‡∏π", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏£‡∏π", "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ô‡πá‡∏ï", "truemoveH"],
    OutputOptions.True_: ["‡∏Ñ‡πà‡∏≤‡∏¢‡πÅ‡∏î‡∏á", "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì", "true", "‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏¢", "‡∏ó‡∏£‡∏π", "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏£‡∏π", "‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏£‡∏π", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏£‡∏π", "‡πÄ‡∏ô‡πá‡∏ï", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏π", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏£‡∏π", "1242", "‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏£‡∏π", "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏π", "‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏£‡∏π", "‡∏ó‡∏£‡∏π‡∏ä‡πá‡∏≠‡∏õ"],
}

sentiment_exp = []
sentiment_val = []
IS_TRUE_exp = []
IS_TRUE_val = []
ADS_exp = []
ADS_val = []

classify_val = []
classify_new = []

# ‡∏´‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏Å API Key ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
if openai_api_key:
    openai.api_key = openai_api_key

    system_prompt = """

    PERSONA:
    You're Social Analysis from TRUE Company, a telecom company with multiple partners.

    TASKS:
    1. Classify the product of from user quotes.

    INPUT SOURCE:
    Many phases gathered from news tablets and Facebook pages.


    **Classify Section**
    You are an AI model that classifies user quotes into one or more True Corporation services.
    Follow these classification rules with high accuracy and efficiency:

    üîπ **Level 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "‡∏ó‡∏£‡∏π" ‡∏´‡∏£‡∏∑‡∏≠ "true" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà**
    - **‡∏ñ‡πâ‡∏≤‡∏°‡∏µ** ‚Üí ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    - **‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ** ‚Üí ‡πÉ‡∏´‡πâ classify ‡πÄ‡∏õ‡πá‡∏ô `"Nan"` ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

    üîπ **Level 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "‡∏ó‡∏£‡∏π" ‡∏´‡∏£‡∏∑‡∏≠ "true")**
    1. **True You**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡πá‡∏î"**, **"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"**, **"‡πÅ‡∏ï‡πâ‡∏°"**, **"‡∏à‡∏±‡∏î‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç"**.
    2. **True Corp**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô"**, **"‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏£‡∏π"**, **"‡∏ã‡∏µ‡∏≠‡∏µ‡πÇ‡∏≠‡∏ó‡∏£‡∏π"**, **"‡∏ó‡∏£‡∏π‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"‡∏ó‡∏£‡∏π ‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡∏Å‡∏£‡∏∏‡πä‡∏õ"**, **"‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠"**, **"‡∏ó‡∏£‡∏π-‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**,
    **"‡∏ó‡∏£‡∏π ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö"**, **"‡πÄ‡∏≠‡∏™ ‡πÄ‡∏≠‡∏ü ‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠ ‡∏ó‡∏£‡∏π‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ø"**, **"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏π ‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"True  + Dtac"**.
    3. **True iService**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"true iservice"**, **"‡∏ó‡∏£‡∏π ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™"**, **"‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞"**, **"True Service"**, **"‡πÑ‡∏≠‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™"**.
    4. **True Visions NOW**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"TrueVisions Now"**, **"TrueVisions Now Max"**, **"‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏π‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô‡∏™‡πå"**.
    5. **True Visions**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡∏ó‡∏£‡∏π‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô"**, **"truevision"**, **"‡∏ó‡∏£‡∏π‡∏™‡πå‡∏ß‡∏¥‡∏ä‡∏±‡πà‡∏ô"**, **"TRUE Vision"**.
    6. **True ID**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"True id"**, **"‡∏ó‡∏£‡∏π‡πÑ‡∏≠‡∏î‡∏µ"**, **"TrueID"**, **"trueid"**.
    7. **True Online**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô"**, **"true fiber"**, **"‡∏ó‡∏£‡∏π‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå"**, **"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô"**, **"Fiber Stand alone"**, **"‡πÇ‡∏õ‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô"**,
    **"WiFi‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô"**, **"Fiber"**, **"‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πåTrue"**, **"‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ó‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏î‡∏á"**, **"‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏£‡∏π"**, **"‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πá‡∏ó‡∏ö‡πâ‡∏≤‡∏ô"**, **"True wifi"**.
    8. **True 5G**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡πÄ‡∏ô‡πá‡∏ï‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"**, **"‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"**, **"‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô"**, **"‡∏ó‡∏£‡∏π‡∏°‡∏π‡∏ü"**, **"‡∏ã‡∏¥‡∏°"**, **"‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"**,
    **"‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"**, **"‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡πÄ‡πÄ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà"**, **"‡πÄ‡∏ô‡πá‡∏ï‡∏´‡πà‡∏ß‡∏¢"**, **"‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à"**, **"‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏¢"**, **"‡πÄ‡∏ô‡πá‡∏ó‡∏ó‡∏£‡∏π"**, **"eSIM"**,
    **"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"**, **"‡πÄ‡∏ô‡πá‡∏ï‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"trueshop"**, **"‡∏ó‡∏£‡∏π‡∏ä‡πá‡∏≠‡∏õ"**, **"‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏°‡πà‡∏≠‡∏±‡πâ‡∏ô"**, **"‡∏Ñ‡∏•‡∏∑‡πà‡∏ô"**, **"‡πÇ‡∏õ‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤"**, **"‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ôTruemove"**,
    **"‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏£‡∏π"**, **"‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏£‡∏π‡∏Å‡∏±‡∏ö‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ"**, **"‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡∏Ç‡∏≤‡∏¢‡πÇ‡∏õ‡∏£"**, **"‡∏ó‡∏£‡∏π‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô"**, **"‡∏ó‡∏£‡∏π‡∏ä‡πà‡∏ß‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡πá‡∏ï"**, **"‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á"**,
    **"‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏£‡∏π‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡πâ‡∏°‡πÜ"**, **"‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÇ‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á‡∏ó‡∏£‡∏π"**, **"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏£‡∏π"**.
    9. **TRUE (General Category)**: ‡∏´‡∏≤‡∏Å‡∏û‡∏ö **"‡∏Ñ‡πà‡∏≤‡∏¢‡πÅ‡∏î‡∏á"**, **"‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"**, **"true"**, **"‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏¢"**, **"‡∏ó‡∏£‡∏π"**, **"‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏£‡∏π"**, **"‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏£‡∏π"**,
    **"‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏£‡∏π"**, **"‡πÄ‡∏ô‡πá‡∏ï"**, **"‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏π"**, **"‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏£‡∏π"**, **"1242"**, **"‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏£‡∏π"**, **"‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏π"**, **"‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏£‡∏π"**
    ‚ûú **‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á "‡πÄ‡∏ô‡πá‡∏ï" ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏ô‡πá‡∏ï‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"**
    ‚ûú **‡πÉ‡∏´‡πâ classify ‡πÄ‡∏õ‡πá‡∏ô `"TRUE"`**

    üîπ **Special Case: "Nan"**
    - ‡∏´‡∏≤‡∏Å **‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ó‡∏£‡∏π" ‡∏´‡∏£‡∏∑‡∏≠ "true"** ‚Üí ‡πÉ‡∏´‡πâ classify ‡πÄ‡∏õ‡πá‡∏ô `"Nan"` ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô **"‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö"**

    """

    system_prompt_2 = """
    PERSONA:
    You're Social Analysis from TRUE Company, a telecom company with multiple partners.

    TO DO: !!MUST ANSWER EVERY PHASE **CANNOT SKIP OR RETURN NONE FOR ANY PHASE**
    ALWAYS RETURN OUTPUT FOR EVERY PHASE, EVEN IF IT'S UNKNOWN.

    TASKS:
    1. Find the sentiment of these user quotes and return the output format for all {phase} phases one-by-one.

    INPUT SOURCE:
    Many phases about TRUE gathered from news tablets and TRUE Facebook pages.

    BASIC CRITERIA FOR SENTIMENT ANALYSIS:
    - If it's just a commercial ad or commercial phase (e.g., phases with # are likely to be ads), classify it as Neutral.
    - If the phase benefits, compliments, or shows interest in TRUE Company or TRUE Products, classify it as Positive.
    - Conversely, if the phase is bad for TRUE Company's reputation, classify it as Negative.
    - If the phase shows interest such as "‡∏™‡∏ô‡πÉ‡∏à", classify it as Positive.

    !!IMPORTANT: RETURN OUTPUT FOR EVERY INPUT PHASE. DO NOT OMIT ANY ITEM!!
    """

    model = "gpt-4o-mini"

    # [ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á True ]

    async def function_llm(qa_test):
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
        qa_list = qa_test.strip().split("\n")
        qa_cleaned = [line.split(". ", 1)[1] for line in qa_list if ". " in line]
        classy_final = []  # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

        def classify_text(text):
            # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á True
            true_keywords = ["‡∏ó‡∏£‡∏π", "true", "‡∏Ñ‡πà‡∏≤‡∏¢‡πÅ‡∏î‡∏á", "dtac", "‡∏î‡∏µ‡πÅ‡∏ó‡∏Ñ", "1242"]

            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö True ‡πÄ‡∏•‡∏¢ ‚Üí Nan
            if not any(word in text.lower() for word in true_keywords):
                return "Nan"

            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö True ‚Üí ‡πÉ‡∏ä‡πâ keywords_dict classify
            for category, keywords in keywords_dict.items():
                if any(keyword.lower() in text.lower() for keyword in keywords):
                    return category

            return "Nan"  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Nan


        # ‡πÉ‡∏ä‡πâ keywords_dict ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç "‡∏ó‡∏£‡∏π" ‡∏Å‡πà‡∏≠‡∏ô
        for qa in qa_cleaned:
            classified_output = classify_text(qa)

            if classified_output is None:  # ‡∏ñ‡πâ‡∏≤ keyword ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ LLM
                completion = openai.beta.chat.completions.parse(
                    model=model,
                    messages=[
                        {"role": "system", "content": system_prompt.format(phase=len(qa.split("\n")))},
                        {"role": "user", "content": qa},
                    ],
                    response_format=Item,
                )
                classy = completion.choices[0].message.parsed

            else:
                classy = classified_output  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å keyword classify

            classy_final.append(classy)

        completion = await openai.beta.chat.completions.parse(
            model=model,
            messages=[
                {"role": "system", "content": system_prompt_2.format(phase=len(qa_test.split("\n")))},
                {"role": "user", "content": qa_test},
            ],
            response_format=SentimentTrue,
        )
        sentiment = completion.choices[0].message.parsed

        output = {
            "Sentiment": sentiment,
            "Classify": classy_final
        }

        return output

    batch_size = 10
    ql = []
    for i in range(0, len(msg), batch_size):
        info = msg[i:i+batch_size]
        info = [f"{j+1}. {info[j]}" for j in range(len(info))]
        ql.append("\n".join(info))

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    if st.button('Run Analysis'):
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô function_llm ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        task = [function_llm(ql[i]) for i in range(len(ql))]
        result = await asyncio.gather(*task)

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ event ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        for event in result:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sentiment
            sentiment_exp.extend([item.explanation for item in event['Sentiment'].Sentiment])
            sentiment_val.extend([item.output for item in event['Sentiment'].Sentiment])

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å IS_TRUE
            IS_TRUE_exp.extend([item.explanation for item in event['Sentiment'].IS_TRUE])
            IS_TRUE_val.extend([item.output for item in event['Sentiment'].IS_TRUE])

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ADS
            ADS_exp.extend([item.explanation for item in event['Sentiment'].ADS])
            ADS_val.extend([item.ADS for item in event['Sentiment'].ADS])

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Classify (‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå)
            classify_val.extend([
                cls.output.value if isinstance(cls, Item) else
                cls.value if isinstance(cls, OutputOptions) else
                cls
                for cls in event['Classify']
            ])

        min_length = len(msg)
        sentiment_exp = sentiment_exp[:min_length]
        sentiment_val = sentiment_val[:min_length]
        IS_TRUE_exp = IS_TRUE_exp[:min_length]
        IS_TRUE_val = IS_TRUE_val[:min_length]
        ADS_exp = ADS_exp[:min_length]
        ADS_val = ADS_val[:min_length]
        classify_val = classify_val[:min_length]

        arrays_length = [len(sentiment_exp), len(sentiment_val), len(IS_TRUE_exp), len(IS_TRUE_val), len(ADS_exp), len(ADS_val), len(classify_val)]

        # st.write(len(sentiment_exp))
        # st.write(len(sentiment_val))
        # st.write(len(len(IS_TRUE_exp))
        # st.write(len(len(IS_TRUE_val))
        # st.write(len(ADS_exp))
        # st.write(len(ADS_val))
        # st.write(len(classify_val))

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if len(set(arrays_length)) != 1:
            st.warning("Warning: Some arrays have different lengths. Please run the process again to ensure data consistency.")

        gpt_4o_mini = pd.DataFrame({
            "Message": msg,
            "LLM_Reason": sentiment_exp,
            "LLM": sentiment_val,
            # "Answer": col2,
            # "Human_Answer": human_ans,
            "IS_TRUE_explain": IS_TRUE_exp,
            "IS_TRUE_value": IS_TRUE_val,
            "ADS_explain": ADS_exp,
            "ADS_value": ADS_val,
            "classify_value": classify_val,
            # "true_classify": col3,
            # "my_classify": my_classify
        })
        # gpt_4o_mini["Result"] = gpt_4o_mini["LLM"] == gpt_4o_mini["Answer"]
        # # gpt_4o_mini["ResultHuman"] = gpt_4o_mini["LLM"] == gpt_4o_mini["Human_Answer"]
        # # gpt_4o_mini["true_classify"] = gpt_4o_mini["true_classify"].replace("TRUE", "True")
        # gpt_4o_mini["ResultClassify"] = gpt_4o_mini.apply(
        #     lambda row: True if row["true_classify"] == "True" and row["classify_value"] == "TRUE"
        #     else set(str(row["true_classify"]).split(", ")).issubset(set(str(row["classify_value"]).split(", "))),
        #     axis=1
        # )
        # gpt_4o_mini["ResultClassify_2"] = gpt_4o_mini.apply(
        #     lambda row: True if row["my_classify"] == "True" and row["classify_value"] == "TRUE"
        #     else set(str(row["my_classify"]).split(", ")).issubset(set(str(row["classify_value"]).split(", "))),
        #     axis=1
        # )
        
        col1, col2 = st.columns([1, 2])  # ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏Å‡∏ß‡πâ‡∏≤‡∏á), ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤ (‡πÅ‡∏Ñ‡∏ö)
        with col1:
            # ‚úÖ **‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô sentiment ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (positive, negative, neutral)**
            st.write("### Sentiment Summary")
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó sentiment ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "LLM"
            sentiment_counts = gpt_4o_mini["LLM"].value_counts()
            # result_true_count = gpt_4o_mini["Result"].sum()
            # result_classify_true_count = gpt_4o_mini["ResultClassify"].sum()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            st.write(f"Total Sentiments: {sentiment_counts.sum()}")
            st.write(f"Positive: {sentiment_counts.get('Positive', 0)}")
            st.write(f"Negative: {sentiment_counts.get('Negative', 0)}")
            st.write(f"Neutral: {sentiment_counts.get('Neutral', 0)}")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Streamlit
            # st.write("### Sentiment count True")
            # st.write(f"Total 'Result' True Count: {result_true_count}")

            # ‚úÖ **‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô classify_value ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**
            st.write("### Classify Summary")
            classify_counts = gpt_4o_mini["classify_value"].value_counts(dropna=False)  # ‡∏ô‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢

            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.write(f"Total Classifications: {classify_counts.sum()}")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            for classify, count in classify_counts.items():
                st.write(f"{classify}: {count}")

            # st.write("### Classify count True")
            # st.write(f"Total 'ResultClassify' True Count: {result_classify_true_count}")

        with col2:
            st.write("### üìä Preview of Analysis Results")
            st.dataframe(gpt_4o_mini)  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ st.table(gpt_4o_mini) ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢

            # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î**
            output = BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                gpt_4o_mini.to_excel(writer, index=False, sheet_name="Analysis Results")
            output.seek(0)

            st.download_button(
                label="üì• Download Excel file",
                data=output,
                file_name="analysis_results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("Please enter your OpenAI API Key to proceed.")

